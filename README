# MongoDB Replica Set Configuration Guide

This guide will walk you through setting up a MongoDB replica set on your local machine, configuring it, and starting the servers.

## Prerequisites

- MongoDB installed on your machine
- Ensure MongoDB is properly installed and its binaries are available in the system's PATH.

## Steps to Create a MongoDB Replica Set

### 1. Create Data Directories

- Before starting the replica set, create directories where MongoDB will store the data for each replica node.

- ```bash
- mkdir -p /data/rs0-1 /data/rs0-2 /data/rs0-3


### Each folder will hold data for one of the replica set members.

### 2. Start MongoDB Instances for Replica Set Members

- Start each MongoDB instance on different ports.

- mongod --replSet rs0 --port 27017 --dbpath /data/rs0-1 --bind_ip localhost --fork --logpath /data/rs0-1/log.txt
- mongod --replSet rs0 --port 27018 --dbpath /data/rs0-2 --bind_ip localhost --fork --logpath /data/rs0-2/log.txt
- mongod --replSet rs0 --port 27019 --dbpath /data/rs0-3 --bind_ip localhost --fork --logpath /data/rs0-3/log.txt

### 3. Connect to One of the MongoDB Instances
- Now connect to one of the MongoDB instances (e.g., the one running on port 27017) using the mongo shell.
- mongo --port 27017

### 4. Initialize the Replica Set

- Once connected to the MongoDB shell, initiate the replica set.

- rs.initiate({
-   _id: "rs0",
-   members: [
-     { _id: 0, host: "localhost:27017" },
-     { _id: 1, host: "localhost:27018" },
-     { _id: 2, host: "localhost:27019" }
-   ]
- })
- This will initialize the replica set with three members running on ports 27017, 27018, and 27019

### 5. Verify Replica Set Status

- You can check the status of the replica set using the following command:

- rs.status()

- This should display information about the replica set and its members.


### 6. MongoDB Replica Set Configuration and Usage

- Configuring MongoDB URI in Your Application
- To connect to the replica set in your application, you need to use a replica set URI. Example:

- MONGODB_URI=mongodb://localhost:27017,localhost:27018,localhost:27019/Person?replicaSet=rs0

### Connecting to MongoDB with Mongoose
- In your Node.js app, use the Mongoose connect() method as follows:

- await mongoose.connect(process.env.MONGODB_URI, { readPreference: 'primary' });

### Important Commands
- Start a MongoDB Instance
- mongod --replSet rs0 --port 27017 --dbpath /data/rs0-1 --bind_ip localhost --fork --logpath /data/rs0-1/log.txt

### Connect to MongoDB Shell
- mongo --port 27017

### Check Replica Set Status
- rs.status()

### Add a New Member to the Replica Set
- rs.add("localhost:27020")

### Remove a Member from the Replica Set
- rs.remove("localhost:27020")

#### Step Down the Current Primary
- rs.stepDown()

#### Force a Reconfiguration (when adding/removing members)

- rs.reconfig({
-   _id: "rs0",
-   members: [
-     { _id: 0, host: "localhost:27017" },
-     { _id: 1, host: "localhost:27018" },
-     { _id: 2, host: "localhost:27019" },
-     { _id: 3, host: "localhost:27020" }  // Adding a new member
-   ]
- }, { force: true })


#### Following the above steps will allow you to set up and configure a MongoDB replica set on your local machine. Ensure to use the correct replica set URI in your applications, and you can scale your replica set by adding or removing members as needed.

### Key Points to Include:
1. **Prerequisites**: Ensure MongoDB is installed.
2. **Data Directories**: Creating directories for each replica set member.
3. **Starting MongoDB Instances**: Starting the MongoDB instances on different ports.
4. **Connecting to MongoDB Shell**: How to connect to one of the running MongoDB instances.
5. **Initializing the Replica Set**: Command to initialize and verify the status of the replica set.
6. **Connecting to Replica Set**: Using `mongoose.connect` with the replica set URI.
7. **Important Commands**: Additional MongoDB commands for managing the replica set.


#### now clone and run app.js
